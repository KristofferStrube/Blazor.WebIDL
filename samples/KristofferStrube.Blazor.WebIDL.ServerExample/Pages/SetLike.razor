@page "/SetLike"

@inject IJSRuntime JSRuntime

<PageTitle>WebIDL - Setlike</PageTitle>

<h1>Setlike</h1>

<p>This page shows a very simple way to implement a wrapper for a JS <code>Set</code> simply by implementing the <code>IReadWriteSetlike</code> interface.</p>

<p>We note that if we add a Cat which is an object we can add as many seemingly equivalent objects as we want since the JS <code>Set</code> uses reference equality for objects.</p>

<h3>
    The set currently has size: <code>@size</code>
</h3>
@if (size > 0)
{
    <h3>
        The values are: <code>[@string.Join(", ", values)]</code>
    </h3>
}

<div style="display:flex;flex-direction:column;grid-gap:5px;">
    <div>
        <button @onclick="() => AddClassValue(inputText)" class="btn btn-success" style="width:200px;">
            Add a string ➕
        </button>
        <input type="text" @bind=@inputText />
    </div>
    <div>
        <button @onclick="() => AddStructValue(inputNumber)" class="btn btn-success" style="width:200px;">
            Add a number ➕
        </button>
        <input type="number" @bind=@inputNumber />
    </div>
    <div>
        <button @onclick="() => AddStructValue(inputBoolean)" class="btn btn-success" style="width:200px;">
            Add a boolean ➕
        </button>
        <input type="checkbox" @bind=@inputBoolean />
    </div>
    <div>
        <button @onclick="() => AddClassValue(inputCat)" class="btn btn-success" style="width:200px;">
            Add a Cat ➕
        </button>
        <label for="name">Name: </label><input id="name" type="text" @bind=@inputCat.Name />
        <label for="age">Age: </label><input id="age" type="number" @bind=@inputCat.Age />
    </div>
</div>


@code {
    Set set = default!;
    ulong size;
    List<string> values = new();
    string inputText = "";
    double inputNumber = 0;
    bool inputBoolean = false;
    Cat inputCat = new();

    protected override async Task OnInitializedAsync()
    {
        set = await Set.CreateAsync<object>(JSRuntime);
        await UpdateSetInformationAsync();
    }

    async Task AddClassValue<T>(T value) where T : class
    {
        await set.AddAsync(value);
        await UpdateSetInformationAsync();
    }

    async Task AddStructValue<T>(T value) where T : struct
    {
        await set.AddAsync(value);
        await UpdateSetInformationAsync();
    }

    public class Cat
    {
        public string Name { get; set; } = "Alice";
        public int Age { get; set; } = 5;
    }

    async Task UpdateSetInformationAsync()
    {
        size = await set.GetSizeAsync();
        values.Clear();
        await foreach (var valueReference in await set.ValuesAsync<Set, ValueReference>())
        {
            values.Add($"({await valueReference.GetValueAsync()}: {await valueReference.GetTypeNameAsync()})");
        }
    }

    [IJSWrapperConverter]
    public class Set : IReadWriteSetlike<Set>
    {
        public IJSObjectReference JSReference { get; }
        public IJSRuntime JSRuntime { get; }

        public static async Task<Set> CreateAsync<T>(IJSRuntime jSRuntime, IEnumerable<T>? iterable = null)
        {
            var jSInstance = await jSRuntime.InvokeAsync<IJSObjectReference>("constructSet", iterable);
            return new Set(jSRuntime, jSInstance);
        }

        public Set(IJSRuntime jSRuntime, IJSObjectReference jSReference)
        {
            JSRuntime = jSRuntime;
            JSReference = jSReference;
        }
    }
}